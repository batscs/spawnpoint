[{"id":"ffca89a4-0151-46c6-a9fb-b817a2207ce2","name":"Road Sign Detection","topics":["concept"],"details":["machine learning"],"description":"# Implementation Details\r\n\r\nImplemented in four steps:\r\n1. Find all streets with coordinates for a specific area\r\n2. Image generation with metadata of the location for each street (multiple images per street)\r\n3. Image processing & road sign detection\r\n4. Data evaluation & crunching\r\n5. Visualization of results\r\n\r\n## Step 1: Find all streets with coordinates for a specific area\r\n\r\nTwo different approaches could be used\r\n\r\n1. One approach would be to start at a random street within the defined area and algorithmically walk into every possible street, similar to a [project (Maze Generation)](/project/6) which I worked on. Here the Google Maps API would be used to get every possible directions and locations to move to.\r\n2. Specific a bounding box with coordinates for the area and use Overpass API to get all street information.\r\n\r\nApproach 2. has been used because a solution for this already exists and I can just use the Overpass API, and Google Maps API is not free, so it would get pretty expensive for large areas.\r\n\r\n## Step 2: Image generation with metadata\r\nUse Google Street View API to generate a 360 degree panorama picture with metadata for the street name, country, city, etc.\r\n\r\nIt is up for debate whether or not street name, country, etc. are even necessary.\r\n\r\n## Step 3: Image processing & road sign detection\r\n\r\nEach image has to be processed and following informations have to be gathered:\r\n\r\n###  [ THIS STEP HAS NOT BEEN FULLY IMPLEMENTED YET ]\r\n\r\n- Classification of each road sign\r\n- Bounding Boxes of each road sign\r\n- (preferably) Height of the road sign from the ground\r\n\r\nAI Models to chooe from:\r\n1. YOLO\r\n2. Detectron2\r\n\r\n## Step 4: Data evaluation & crunching\r\n\r\nWith the images and their metadata there is a lot data which could help figuring out each unique road sign and its (more or less) exact location, for this I was thinking about following approaches:\r\n\r\n1. **Group by Streetname + Streetnumber** and evaluate all images for the given street, only take the image where the street sign is closest to the actual image (biggest in size on the picture). \r\n2. **Calculate angle and distance** based on the image. \r\nAs we have 360 degree panorama pictures, and the left most side is always directly facing north. With this we can \r\n3. *Theoretically* images of the same sign could be grouped together and with this information the road sign location could be **trinagulated** (requries at least 3 images per sign).\r\n\r\nThe first approach however would not work for two symbolically equal road signs next to each other, or where a road sign is seen from two different streets as seen in this example:\r\n\r\n![image](/static/resources/media/8dd7dec6-f96a-417b-bd86-d1dd21f6f98b.png)\r\n\r\nThe green road sign is the exact same, however the two images are from different angles and completely different streets (street name + number in top left of each picture). This makes this approach not feasible.\r\n\r\nAlso differentiating between the red-outlined and green-outlined road signs would be difficult when crunching the data like described previously.\r\n\r\nUsing the second approach we can calculate each individual road sign for each picture and we get pretty accurate results for the location of the road sign. It is also not a problem that we count a single sign multiple times from different images, as we can group road signs that are very close to each other within a small threshold (~0.5 meter for example) and average the latitude and longitude and count the result as a unique road sign.\r\n\r\n![image](/static/resources/media/8a5172a7-733d-49ee-a5df-9642b6ff347f.png)\r\n\r\n![image](/static/resources/media/060b4280-753c-46ae-8bdf-2c6bc48b6df5.png)\r\n\r\nApproach 2 has been chosen to be used in this project, approach 3 could theoretically result in more precise data  however but would be way more difficult to implement and more computationally intensive, for only very little upside, as approach two comes close to triangulating by averaging out the results of multiple images.\r\n\r\n## Step 5: Data Visualization\r\n\r\nThe python package `folium` can be used to generate a html file of a map with a visualization of all road signs from the result of the previus step\r\n\r\n# Known Problems / Difficulties:\r\n\r\n## Google Maps Pictures can be outdated and not represent road signs that are on the streets today\r\n\r\n## AI could falsely detect or classify road signs, or not detect them at all\r\n\r\nTest results of the AI will be given once a model has been implemented and trained.\r\n\r\n## Very expensive for large areas due to Google API costs\r\n\r\n- 4 calls per image (each direction is one image)\r\n- 1 call per latitude and longitude pair from OverpassAPI to snap to a road in google maps\r\n- 1 additional call per image for location metadata (streetname, city, etc.)\r\n\r\n---\r\n\r\n> Written: 2024-10-05","isPublished":true,"startDate":"2024-10-01","endDate":"","source":"","preview":"","banner":"1e39d0b1-bae0-4cab-8bb1-74762055eb1d.png"},{"id":"9dc66200-8e96-438f-b9e8-c77857486718","name":"Pangolin","topics":["webdev","software"],"details":["nodejs","expressjs","modular"],"description":"### [ THIS CONTENT IS STILL BEING WRITTEN / IN ACTIVE DEVELOPMENT ]\r\n# Introduction\r\nTBD\r\n\r\n# Features\r\n\r\n## User Permission Management\r\n\r\n![image](/static/resources/media/270428da-4429-40af-becf-9cf3a9b4ab7b.png)\r\n\r\n## Plugin Administration\r\n\r\n![image](/static/resources/media/edc7f264-0dff-4697-8971-b957d1216206.png)\r\n\r\n# Demonstration\r\n## TBD\r\n[video](/static/resources/media/pangolin-0.mp4)\r\n\r\n## Example: Stop\r\n[video](/static/resources/media/pangolin-1.mp4)\r\n\r\n## Example: Permission (access)\r\n[video](/static/resources/media/pangolin-2.mp4)\r\n\r\n# Architecture Decision Record: Plugin Execution Strategy\r\n\r\n## Context\r\n\r\nVarious methods to run plugins were evaluated, including:\r\n\r\n1. **Direct injection into the Node.js runtime**\r\n2. **Execution as separate threads**\r\n3. **Execution as child processes**\r\n\r\nEach approach has its own advantages and disadvantages, as outlined below.\r\n\r\n## Considered Options\r\n\r\n### 1. Direct Injection into Node.js Runtime\r\n- **Advantages:**\r\n  - Simple to implement.\r\n  - Can enforce a specific interface, ensuring all plugins adhere to a predefined schema.\r\n- **Disadvantages:**\r\n  - Direct access to the runtime poses security risks.\r\n  - Lack of isolation means plugin failures could affect the entire system.\r\n\r\n### 2. Execution as Threads\r\n- **Advantages:**\r\n  - Faster communication between the main application and the plugin, as threads share memory space.\r\n  - Moderate isolation, where failures within a thread are more manageable than with direct injection.\r\n  - Lower overhead compared to child processes.\r\n- **Disadvantages:**\r\n  - Some overhead due to thread management.\r\n  - Less isolation compared to child processes, so plugin errors can potentially impact the main application.\r\n\r\n### 3. Execution as Child Processes\r\n- **Advantages:**\r\n  - Complete isolation from the main application, providing enhanced stability and crash protection.\r\n  - Easier monitoring and control; plugin crashes do not affect the core application.\r\n- **Disadvantages:**\r\n  - Data exchange between the main application and the child process is more complex and less reliable.\r\n  - No guarantee that the plugin will meet all functional requirements, as it operates in a separate process without a predefined schema.\r\n\r\n## Decision\r\n\r\nThe decision is to implement plugin execution using **threads**. This approach offers a balanced solution by providing faster communication with lower overhead while maintaining a degree of isolation and crash protection. It combines the benefits of direct injection and child processes, making it a suitable compromise for this context.\r\n\r\n\r\n## Example Code: Directly Injected vs Child Processes\r\nHere is a equal code implemented in two different ways to show the downside of child process and the difficulty it brings in handling data exchange between processes.\r\n\r\n### Injected:\r\n```python\r\nrouter.get(\"/api/admin/plugin/:name/start\", (req: Request, res: Response) => {\r\n    const name = req.params.name;\r\n    const plugin = manager.getPlugin(name);\r\n    const perms: Permissions = req.permission;\r\n\r\n    if (plugin == null) {\r\n        res.send({\"error\": \"no plugin\"});\r\n    } else if (plugin.isConfigurable(perms) || perms.hasAnyPermission(manager.PERMISSIONS.ADMIN, manager.PERMISSIONS.MANAGER_SCALING)) {\r\n        plugin.start();\r\n        res.send({\"status\": plugin.getState()});\r\n    } else {\r\n        res.send({error: \"unauthorized\"});\r\n    }\r\n});\r\n```\r\n\r\n### Child Process:\r\n```typescript\r\nrouter.get(\"/api/admin/plugin/:name/start\", (req: Request, res: Response) => {\r\n    const name = req.params.name;\r\n    const pluginProcess = PluginManager.getPluginProcess(name);  // Get the child process of the plugin\r\n    const perms: Permissions = req.permission;\r\n\r\n    if (!pluginProcess) {\r\n        return res.status(404).send({ \"error\": \"Plugin not found\" });\r\n    }\r\n\r\n    // Check if user has the necessary permissions to start the plugin\r\n    if (!perms.hasAnyPermission(PluginManager.PERMISSIONS.ADMIN, PluginManager.PERMISSIONS.MANAGER_SCALING)) {\r\n        return res.status(403).send({ error: \"Unauthorized\" });\r\n    }\r\n\r\n    // Send a message to the plugin process along with the user's permissions\r\n    pluginProcess.send({\r\n        type: 'startPlugin',\r\n        permissions: perms.getPermissions()  // Send the permissions to the plugin process\r\n    });\r\n\r\n    // Listen for the plugin's response\r\n    pluginProcess.once('message', (message: any) => {\r\n        if (message.type === 'pluginState') {\r\n            res.send({ status: message.state });\r\n        } else {\r\n            res.status(500).send({ error: 'Failed to start plugin' });\r\n        }\r\n    });\r\n\r\n    // Handle plugin process errors\r\n    pluginProcess.once('error', (error: any) => {\r\n        console.error(`Error in plugin ${name}:`, error);\r\n        res.status(500).send({ error: 'Plugin process error' });\r\n    });\r\n});\r\n```\r\n\r\n# Implementation Details\r\n\r\n## Terminology\r\n\r\nRefering to the core means the main pangolin application.\r\n\r\nPlugins, or in this context also sometimes refered to as \"scales\" (due to the Pangolin animal), are modules that can be installed and fully managed in the pangolin web panel.\r\n\r\n## Plugin API\r\n\r\nPlugins are modules that can be installed into the core pangolin application. They require a index.ts file which implements the following typescript interface:\r\n\r\n```typescript\r\nexport interface Plugin {\r\n    name: string;    // Plugin name\r\n    version: string; // Plugin version\r\n\r\n    initialize(): void; // Logic for initiliazing a plugin once\r\n    start(): void; // Logic for starting a plugin\r\n    stop(): void; // Logic for stopping a plugin\r\n\r\n    getPermissions(): string[]; // String-Array of available permissions\r\n    getState(): string; // Get state of plugin\r\n    getLogs(): string[]; // Get logs of plugin\r\n\r\n    // Check if user can access/view this plugin\r\n    isAccessible(permissions: Permissions): boolean; \r\n\r\n    // Check if user can manage this plugin (start, stop)\r\n    isConfigurable(permissions: Permissions): boolean; \r\n\r\n    // Register http endpoints for the /plugin/<pluginname>/ path\r\n    registerEndpoints(router: Router): void; \r\n}\r\n```\r\n\r\nThis approach gives full flexibility towards the plugin, but it also comes with a lot of responsibility. For example, the core has to trust the plugin to return the correct state when calling `plugin.getState()`.\r\n\r\nHowever, the benefit is that the plugins can act as their own full application, in theory even allowing a pangolin plugin in pangolin. The router given for the registerEndpoints() function is for the path /plugin/<pluginname>, and they have full control over their routes and what they want to display. \r\n\r\n## Plugin Loading\r\n\r\nThe plugins are simply being loaded by iterating through the /scales directory and and requiring the subdirectories, and storing the instances in a Map with their plugin name as a key to keep them accessible.\r\n\r\n## Permission System\r\n### Permission Parser (Middleware)\r\nThe express.js request interface has been expanded to include a request.permission which returns a Permission Object, which gets injected with a permission-parser interface on each incoming request.\r\nA user is identified by a random generated UUIDv4 which acts as a token.\r\n\r\n```typescript\r\nexport function permissionParser(req: Request, res: Response, next: NextFunction) {\r\n    const token = req.cookies?.token;\r\n\r\n    if (!token) {\r\n        req.permission = new Permissions(null, []);\r\n        next();\r\n        return;\r\n    }\r\n\r\n    const userid : string | null  = auth.getUserIdByToken(token);\r\n    if (userid) {\r\n        req.permission = new Permissions(userid, auth.getUserPermissions(userid));\r\n    } else {\r\n        req.permission = new Permissions(null, []);\r\n        res.clearCookie(\"token\");\r\n    }\r\n\r\n    next();\r\n}\r\n```\r\n\r\n### Permission Object\r\nAs described earlier, the permission object from the express.js request provides functions to check for permissions from an incoming request, and is implemented like this:\r\n\r\n```java\r\nexport default class Permissions {\r\n    private permissions: string[];\r\n    private userid: string | null;\r\n\r\n    constructor(userid: string | null, permissions: string[]) {\r\n        this.permissions = permissions;\r\n        this.userid = userid;\r\n    }\r\n\r\n    public getPermissions(): string[] {\r\n        return this.permissions;\r\n    }\r\n\r\n    // Method to check if a single permission exists\r\n    public hasPermission(permission: string): boolean {\r\n        return this.permissions.includes(permission);\r\n    }\r\n\r\n    // Method to check if all permissions are granted\r\n    public hasAllPermissions(...permissions: string[]): boolean {\r\n        return permissions.every(permission => this.permissions.includes(permission));\r\n    }\r\n\r\n    // Method to check if any of the given permissions are granted\r\n    public hasAnyPermission(...permissions: string[]): boolean {\r\n        return permissions.some(permission => this.permissions.includes(permission));\r\n    }\r\n\r\n    // True if session has no token or no token that can be associated with a user.\r\n    public isGuest(): boolean {\r\n        return this.userid == null;\r\n    }\r\n}\r\n```\r\n\r\nWith this plugins can access the permissions of an incoming request and and permit or deny them the access to the resource. This solution provides a centralized permission system from the core for otherwise independend plugins.\r\n\r\n### Permissions\r\nBy default there are following permissions available:\r\n- **pangolin:admin** permits access to all pangolin tools\r\n- **pangolin:manager** permits access to pangolin management page\r\n- **pangolin:manager-scales** permits configuration access to all plugins\r\n- **pangolin:manager-users** permits to configure all users and their roles\r\n\r\nAll plugins can have as many own permissions as they desire, however they need to start with `<plugin_name>:`\r\n\r\n# Example Plugin \"rNums\" (Random Numbers)\r\n\r\nIt's a plugin to demonstrate that, in theory, there are no limitations to the plugins. This plugin runs a python script as a child process, which generates 5 random numbers each second and stores them in a numbers.json database.\r\n\r\nrNums also registers its own frontend using the website template to have a seemless integrated look, which simply displays the 5 generated numbers in a table. This works by also registering an api endpoint for its own web path (GET /data) which returns the json database. This data is being fetched each second from the frontend using javascript and being displayed.\r\n\r\nJust visiting the rNums page might seem like it's a meaningless plugin, but it proves that the plugins can fully implement their own logic (python script for generating random numbers), store persistent data, and implement their own frontend and access their data from here.\r\n\r\n# Future Plans\r\n\r\n## Plugin Config\r\nIn the admin panel settings tab add a configuration interface for each plugin, where also users who are permitted by isConfigurable() can configure parameters for the plugin.\r\n\r\n## Plugin Deployment\r\nAllow the users with pangolin:manager-scales permission to deploy and undeploy plugins in runtime.\r\n\r\n## Conflict Avoidance\r\nWhen a new plugin is being deployed verify that there are no conflicts with existing plugins, such as:\r\n\r\n1. **Duplicate Plugin Names**\r\nCould be fixed by keeping track of all current plugins and their respective names.\r\n\r\n2. **Duplicate Permission Names**\r\nCould be fixed by forcing plugins to name permissions in a specific format, such as starting with `<pluginname>:`\r\n\r\n## Wrapped Plugin Files\r\nIt would be a fun topic to learn more about using my own file format that wrap / encapsulate the plugin, to deploy a singular file and not an entire folder (like .EAR or .WAR files). I would need to come up with a solution for storing persistent data, and if it makes sense to store it in the plugin file or somewhere else.\r\n\r\n## Plugin Statuspage\r\nTheoretically, a statuspage where metrics about performance usage are provided would be pretty cool, however the current approach to loading the plugins would need to be changed, and they would be needed to run as subprocesses each, and not injected into the current nodejs process.\r\n\r\n---\r\n> Written: 2024-09-20","isPublished":true,"startDate":"2024-09-01","endDate":"","source":"https://git.bats.li/bats/pangolin","preview":"","banner":"7f33ffc4-b5d1-48e2-bad9-61bda286a11c.png"},{"id":"010101","name":"Spawnpoint","topics":["webdev"],"details":["nodejs","expressjs","scalable"],"description":"# Introduction\r\n\r\nWelcome to **Project Spawnpoint**, the website I am currently working on. It’s a complete rework of my old homepage, which has been long overdue for an upgrade. While the previous version served its purpose, it was built with PHP and lacked scalability, which became more and more of a pain as I continued to add projects.\r\n\r\nThis new version is built with **Node.js** and **Express.js**, allowing for a much more scalable approach. The main reason for this rework was to make the website adaptable for future growth while also introducing an **admin panel** that enables me to manage projects with ease. Now, I can add new projects and update information without diving into the code every time. All the data is saved persistently, making it far more efficient to handle.\r\n\r\n![image](/static/resources/media/f6b8a654-a947-489a-82cc-4f62320078f1.png)\r\n\r\n# Intention\r\nIn contrast to **Spawnpoint**, the old website forced me to manually edit the code every time I wanted to add a new project, which was far from ideal. While it worked in the early stages, it quickly became frustrating and time-consuming. This new system streamlines the process and gives me the flexibility to scale as needed, without having to worry about the technical limitations of the past, thanks to the implementation of an admin panel.\r\n\r\n![image](/static/resources/media/982741e2-63f2-4519-b772-0f09959e722a.png)\r\n\r\n# Implementation Details\r\n\r\n## Authorization\r\nAs this web app is not intended to provide access to multiple users, password authorization has been chosen for the admin panel. On successful login, a server-side generated token is associated with the user (saved as a cookie). On each HTTP request to the admin panel, the cookie is verified to ensure it is still valid to prevent unauthorized access.\r\n\r\n## Front- & Back-End Separation\r\nAlso, different from the previous iteration of this website, which was a monolith made entirely out of PHP, HTML, and CSS, this project has a proper backend and an independent front-end. The front-end has been implemented with the templating language **Pug**, which is translated into **HTML**.\r\n\r\n## Persistence\r\nAll projects are saved in a JSON database. JSON was chosen because it is a lot less performance- and storage-demanding than a relational database, as the only overhead is ensuring data integrity. Since the points of failure are manageable (editing and creating projects), this is not a significant issue.\r\n\r\nA database cache has also been implemented, which caches all results accessed by users for a set amount of time. The downside is that changes may only be visible after the cache expires, but the upside is that frequent reading of the file is prevented. Since changes aren’t expected often, this is a net positive.\r\n\r\n## Flexibility\r\nEach project can have its own description, which supports markdown when editing in the admin panel and renders accordingly when visited by users. This was made to allow the admin (me) to create very flexible descriptions of projects and dynamically include pictures and code blocks.\r\n\r\n![image](/static/resources/media/7f92db85-0eac-49fe-a8f7-c3fb9cb0273c.png)\r\n\r\n## Blog Posts (discarded)\r\nInitially, I planned to have a blog for each project where new posts could be added and existing ones edited through the admin panel. However, I discarded this idea because it wouldn’t provide much additional benefit over the description field (other than perhaps separating blog posts or comments). Updates can still be added in the current description and visualized with markdown, for example:\r\n\r\n> Update: 2024 September 15th  \r\n> Today I decided not to work on this project and went shopping.\r\n\r\n---\r\n> Written: 2024-09-14\r\n","isPublished":true,"startDate":"2024-07-04","endDate":"2024-08-29","source":"https://git.bats.li/bats/spawnpoint","preview":"https://bats.li","banner":"168b84e7-0f43-49a2-8061-15d68866580d.png"},{"id":"5dc16c3d-60a7-4e5d-b29d-c35d82c4be31","name":"Linux Homeserver","topics":["hardware"],"details":["docker","admin","networking"],"description":"# Home Server Setup\r\n\r\nThis is a place to document my journey in setting up my home server, primarily to learn about server administration and to host services for my personal projects.\r\n\r\n![image](/static/resources/media/c81e7ff5-3faa-4163-9be9-97d66aee2701.png)\r\n\r\n# Technical Details\r\nThe home server is a Dell Optiplex 3070 equipped with an Intel i5-9500T. Originally, it came with 8GB of RAM and a 500GB HDD, but I upgraded it to 32GB of RAM and replaced the HDD with a 1TB NVMe SSD (Samsung Evo 970). This was to ensure I would not need to worry about storage usage for the forseeable future, and be able to run many containers in parallel without worrying about ram usage.\r\n\r\nI acquired this machine with the intention of learning more about server administration and hosting servers for personal projects with docker. Because of this, I chose Ubuntu 22.04 LTS as the Operating System.\r\n\r\n![image](/static/resources/media/mirage.png)\r\n\r\n# Configuration\r\nThe server acts as the backend for my domain, [bats.li](https://bats.li). All incoming traffic is routed through a Traefik reverse proxy, allowing different subdomains (e.g., git.bats.li and cloud.bats.li) to be routed to separate Docker containers, even though they share the same IP address on my home server.\r\n\r\n## Running Services\r\nCurrently, the server hosts several services that I use regularly:\r\n\r\n- **Nextcloud** (Cloud Storage)\r\n- **Gitea** (self-hosted Git service)\r\n- **Vikunja** (Kanban board for project & idea management)\r\n- **[Spawnpoint](/project/010101)** (Homepage)\r\n\r\nEach service runs inside its own Docker container, making management, updates, and scaling simple.\r\n\r\n# Challenges & Learnings\r\nSetting up Traefik was an painful experience at first, particularly because it was hard to understand unexpected behaviour. However after reading a lot of documentation I figured how to configure traefik and assign containers to traefik using labels and the correct docker network. The reverse proxy allows seamless routing of traffic to the appropriate service without exposing all ports individually.\r\n\r\nDocker and Traefik have made it incredibly easy to run multiple services on the same server, all accessible through different subdomains, giving me a better grasp of network configuration and server management.\r\n\r\n---\r\n> Written: 2024-09-15\r\n","isPublished":true,"startDate":"2024-05-01","endDate":"2024-05-20","source":"","preview":"","banner":"91cbed7f-eee6-48ee-9386-ee16a86db707.png"},{"id":"2","name":"BESD","topics":["software"],"details":["docker","python"],"description":"# BESD (Bats' Epic Server Dashboard)\r\n\r\nThis is a place to document my journey in building BESD, a self-made dashboard to monitor various system metrics. The primary goal was to get hands-on experience with Docker and Docker Compose, understanding how multiple containers can communicate in a shared Docker network.\r\n\r\n![image](/static/resources/media/4b6108a4-1c25-4ebb-8dca-94dc5e195730.png)\r\n\r\n# Intention\r\nBESD is designed to monitor my [home server's](/project/5dc16c3d-60a7-4e5d-b29d-c35d82c4be31) performance metrics and make them available through a simple web interface. The main focus was learning Docker, so the frontend is quite basic, but it gets the job done.\r\n\r\nFor my [home server project](/project/5dc16c3d-60a7-4e5d-b29d-c35d82c4be31), I wanted a custom solution that tracks important metrics like:\r\n\r\n- Docker container stats\r\n- Memory usage\r\n- Storage usage\r\n- Network activity (tx and rx)\r\n- System information (OS, CPU name, CPU temperature, CPU power)\r\n- Server time and uptime\r\n- Number of running containers\r\n\r\nAll this data is collected and stored in a MySQL Docker container.\r\n\r\n# Implementation Details\r\nI used three main Docker containers to accomplish this:\r\n\r\n## Python Metrics Collector\r\n   A Python script running in a Docker container continuously gathers stats and metrics from the server. It collects data on the previously mentioned statistics. This data is then stored in a MySQL database.\r\n\r\n## MySQL Database\r\n   The collected metrics are stored in a MySQL database, also running in its own Docker container. Nodes (python containers) can connect to this MySQL Database, to be scalable for future usage.\r\n\r\n## Apache Web Server\r\n   The frontend is served using an Apache web server. PHP is used to query the MySQL database and provide an API. JavaScript handles asynchronous calls to display the data. The UI is basic, with simple HTML and CSS, allowing users to see current metrics for any selected host. A dropdown at the top of the page lets users switch between hosts.\r\n\r\n# Discarded Ideas\r\n## Time Diagram\r\nOne of the ideas was to include charts showing historical data, but I decided not to pursue this since the main goal was learning Docker and Docker Compose. I would have needed to learn a charting library or framework for the frontend, and that wasn't my priority at this stage.\r\n\r\nThe frontend can support multiple hosts, which can be selected from the dropdown. However, all hosts must connect to the same MySQL server/container, as specified in the `.env` file.\r\n\r\n# What I learned from this\r\nWith this project I learned how to make my own docker images and run them.\r\n\r\n---\r\n> Written: 2024-09-15","isPublished":true,"startDate":"2024-04-01","endDate":"2024-04-20","source":"https://git.bats.li/bats/bats-epic-server-dashboard","preview":"https://status.bats.li","banner":"besd.png"},{"id":"3","name":"BFEC","topics":["software","concept"],"details":["python","encryption","sockets"],"description":"# BFEC (Bats' Fully Encrypted Chat)\r\n\r\nThis is a place to document my journey in building BFEC, a project aimed at learning how to implement a peer-to-peer chat. I chose Python for development because it allowed me to build the project quickly and focus on the core networking and encryption features.\r\n\r\nTo achieve this, I had to learn how to work with sockets and send data between peers.\r\n\r\n![image](/static/resources/media/caaf9c3a-1ffd-4253-9293-7c3582e6e851.png)\r\n\r\n# Implementation\r\n\r\n## Connection Establishment\r\nEstablishing a connection between two peers involves following key steps:\r\n\r\n- Connect to the server of the other peer. If the connection fails, become the server and allow the other peer to connect to the newly created server.\r\n- Exchange RSA public keys and verify their integrity (by comparing checksum of both public keys).\r\n- The peer hosting the server generates an AES key and shares it securely, using end-to-end encryption (E2E) with RSA (AES is used because RSA can't encrypt large amounts of data)\r\n\r\n## Metadata & Message\r\nEach packet is divided into three segments:\r\n\r\n- **AES-Nonce (16 bytes):** Required for AES decryption. This nonce is provided as header information and is not sensitive data.\r\n- **RSA-Signature (256 bytes):** A checksum (sha256) of the unencrypted message, encrypted with the sender's RSA private key. The receiving peer can decrypt it with the sender’s public key and verify the checksum against the decrypted third segment (the encrypted message), protecting against man-in-the-middle (MITM) attacks.\r\n- **Encrypted Message (trailing bytes):** The actual message, encrypted using AES, which can be decrypted using the AES nonce and the previously exchanged AES key.\r\n\r\n\r\n# Software Security\r\n\r\n## Current Security Risks\r\nIt’s important to note that this method cannot fully protect against a MITM attack that intercepts the connection and replaces both public keys from the start. This is a issue that **can not** be solved with a unsecured/untrusted line of communication.\r\n\r\n## Implemented Security Measures\r\nThe critical phase of this implementation is during the connection and key exchange between peers. The primary threat is a MITM attack, where an attacker might replace the RSA public keys.\r\n\r\nTwo layers of protection are implemented:\r\n\r\n1. Client-Side Public Key Verification\r\nBoth peers automatically verify a checksum of the combined public keys. Although this can still be compromised by a sophisticated MITM attack, it adds a first layer of defense. This protects against a single replaced public key during the key exchange.\r\n   \r\n2. RSA Signature Verification\r\nThe message checksum is encrypted with the sender’s RSA private key. The receiver can verify the integrity of the message using the sender's public key, ensuring the message hasn’t been tampered with, as long as the public key exchange was secure. This protects against manipulated or altered messages after the initial key exchange.\r\n\r\n---\r\n> Written: 2024-09-16","isPublished":true,"startDate":"2024-03-01","endDate":"2024-03-05","source":"https://git.bats.li/bats/bats-fully-encrpyted-chat","preview":"","banner":"bfec.png"},{"id":"5","name":"Hase und Igel","topics":["software"],"details":["java","javafx","oop"],"description":"# Hase und Igel\r\n\r\n\"Hase und Igel\" is a extensive programming project I worked on during my 3rd semester at the FH Wedel University in Germany. The project is a full implementation of the game \"Hase und Igel\" using an object-oriented approach.\r\n\r\n![image](/static/resources/media/00311fa1-b85b-4259-8fe3-d31885adb3c0.png)\r\n\r\n# Implementation Details\r\nThe project was designed with good programming practices in mind, particularly by separating logic from the GUI.\r\n\r\n## Logic and GUI Separation\r\nThis allows for cleaner design and easier maintenance. The GUI frontend is completely independent of the game logic.\r\n  \r\n## Multilingual Support\r\n The frontend can be translated into any language because language tokens are used in the backend. A `Translator` object handles these tokens and provides translations, with German and English implemented by default.\r\n\r\n## Saving and Loading\r\nEach game logic instance can create a `GameData` object, which acts as a wrapper for the core game information (like players and positions). This data is serialized into a JSON file using GSON, allowing for persistent game states.\r\n\r\n## JavaFX Timelines\r\nUsed to animate players as they move across the board, enhancing the user experience with smooth transitions.\r\n\r\n## Object-Oriented Design\r\nEvery in-game object has been represented as an object. This includes:\r\n- **Player** representation of a participating player\r\n- **Fields** representation of a field along side its actions that a player can interact with\r\n- **GameLogic** representation of an entire \"Hase und Igel\" game\r\n- **GameBoard** embodiment of algorithms depending on the current board situation\r\n- **GameData** wrapps necessary information from a running GameLogic Instance\r\n- **GUI Translator** translates logic tokens to text on the frontend\r\n\r\nThe game board is represented as an array of `Field` objects, where each field implements specific logic for player interactions.\r\n\r\n## Field Interface\r\nEach field in the game implements the `Field` interface, which defines key interactions that can occur when a player moves on or interacts with the field.\r\n\r\n```java\r\npublic interface Field {\r\n    // Get the type of the field\r\n    FieldType getType();\r\n    \r\n    // Interact before the player moves to this field\r\n    void interactBeforeMove(Player target);\r\n    \r\n    // Interact after the player has moved to this field\r\n    void interactAfterMove(Player target, GameLogic game, GUIConnector gui);\r\n    \r\n    // Interact while the player is idling on the field\r\n    void interactOnIdle(Player target, GameLogic game, GUIConnector gui);\r\n    \r\n    // Get the position of the field on the board\r\n    int getPosition();\r\n}\r\n```\r\n\r\n\r\n## Program-Organization-Plan\r\n![image](/static/resources/media/4f77b64e-a8d6-4b83-b4ce-6628e0392b05.png)\r\n\r\n---\r\n> Written: 2024-09-16\r\n","isPublished":true,"startDate":"2023-07-01","endDate":"2024-02-20","source":"","preview":"","banner":"haseundigel.png"},{"id":"6","name":"JFX Maze Generation","topics":["software"],"details":["java","javafx","algorithm"],"description":"# Visualizing Maze Generation Algorithms with JavaFX\r\n\r\nOne of the projects I undertook to dive deeper into GUI development in Java was **\"JFX Maze Generation\"**. The core idea was to visually display how different maze generation algorithms work while learning JavaFX for creating graphical interfaces.\r\n\r\n# Motivation\r\nMy goal was to better understand how to build GUIs in Java, and what better way than to create a project that not only looks visually interesting but also allows me to learn how different algorithms work under the hood. By showing the step-by-step creation of mazes with animations, I could see these algorithms in action and learn both algorithmic thinking and GUI development.\r\n\r\n# Maze Generation Algorithms\r\nIn this project, I implemented various maze generation algorithms, each of which can be visually displayed through the JavaFX interface. Below are some of the algorithms I experimented with:\r\n\r\n## Recursive Backtracking Algorithm\r\nThe recursive backtracking algorithm is one of the most commonly used maze generation techniques. It works by recursively visiting cells and \"backtracking\" when hitting dead ends, eventually covering the entire grid.\r\n\r\n[video](/static/resources/media/229618695-e43fc8ab-87fc-4edb-a05c-521fe0b4fed5.mp4)\r\n\r\n## Random Branches Algorithm\r\nThis algorithm generates a maze by randomly creating branches that extend from a starting point. It doesn’t guarantee a perfect maze but creates interesting patterns.\r\n\r\n[video](/static/resources/media/229618683-9dc361d0-f75f-44d4-ae87-1d374a8c0f98.mp4)\r\n\r\n## Binary Tree Algorithm\r\nThe binary tree maze generation algorithm is simple yet effective. It divides the grid into two regions (usually up and right) and carves out a maze by eliminating walls between cells.\r\n\r\n[video](/static/resources/media/229618571-135fdb61-1b28-49f5-8061-a4dec15f2d4a.mp4)\r\n\r\n## Custom Maze Sizes\r\nAn exciting feature of the project was the ability to change the size of the maze dynamically. Whether you want a small or large maze, you can adjust the size through the UI and instantly see the maze generation process.\r\n\r\n[video](/static/resources/media/229618546-d52b8d23-640c-41c4-88a9-b4655de906b7.mp4)\r\n\r\n# What I learned\r\nWorking on this project allowed me to get comfortable with JavaFX. The visual nature of the project also gave me quick feedback on what I was doing right and where I needed to improve. Looking back at it what I could have improved the most was seperating logic and gui, which I accomplished in my following [JavaFX Project](/project/5). Not having a clear seperation between the two gave me many problems in implementing the maze algorithms, because they constantly had to keep in touch with the frontend, and JavaFX does not like being interferred from another thread, where the algorithms had to be running on to not interrupt the frontend experience.\r\n\r\n---\r\n> Written: 2024-09-16\r\n","isPublished":true,"startDate":"2023-03-01","endDate":"2023-03-20","source":"","preview":"","banner":"jfx-maze-gen.png"},{"id":"4","name":"Homepage 1.0","topics":["webdev"],"details":["css","html"],"description":"# Introduction\r\n**Homepage 1.0** was my first attempt at creating a professional homepage to showcase my portfolio and the work I had done. It was the predecessor to what would later become the [Spawnpoint](/project/010101) project. This version was an important stepping stone in my journey, teaching me a lot about **web development**, **scalability**, and **user experience**.\r\n\r\nIt is still live at [v1.bats.li](https://v1.bats.li/home)\r\n\r\n![image](/static/resources/media/eb739309-edbe-4b9f-b5f7-f85ddc7234d6.png)\r\n\r\n# Implementation Details\r\nThe entire project was built using **PHP**, **HTML**, and **CSS**, which worked well for a small-scale website. This project was also the reason I purchased the **bats.li** domain and rented a server from **Netcup**. My goal was to build a place where I could showcase my abilities and projects, making it a professional portfolio.\r\n\r\n## Hardcoded Structure and Scalability Challenges\r\nWhile Homepage 1.0 did what it needed to do, I quickly ran into issues with scalability. The website had no real **database** or **persistent storage** for projects or content. Instead, all information, including project details, was **hardcoded** into the site. \r\n\r\nFor each project that was displayed a line of code similar to this one had to be written:\r\n```php\r\n<?php drawCard(\"BESD\", [\"python\", \"mysql\", \"html\", \"docker\"], [\"favorites\", \"software\"], \"April 2024\", \"Bats' Epic Server Dashboard - Monitor all your metrics from your linux server\", \"https://status.bats.li\", \"https://git.bats.li/bats/bats-epic-server-dashboard\", \"besd.png\") ?>\r\n```\r\n\r\nAs you can imagine, this was a chore to keep updated and not a fun experience. This workflow became tedious and unsustainable, especially as I added more projects. There was no easy way to implement individual project pages like the ones found in Spawnpoint, since **rendering markdown** was not feasible with this approach.\r\n\r\nThese limitations made me realize the importance of **scalability** and **future-proofing** when developing websites, especially if they’re meant to grow or regularly showcase new content.\r\n\r\n# Learning About UI/UX and Mobile Design\r\nOne of the more positive takeaways from Homepage 1.0 was the experience I gained in **UI/UX design**. I spent a lot of time learning how to structure the layout, choose color schemes, and make the site **mobile-friendly**, as this was my first website where I specifically wanted mobile support. This process helped me understand what works well in terms of user experience and what doesn’t, which has significantly informed how I approach web design today.\r\n\r\n# Conclusion\r\nWhile **Homepage 1.0** ultimately reached its limitations and was replaced by the more robust [Spawnpoint](/project/010101), it played a critical role in shaping how I think about web development. It was my introduction to the challenges of **scalability** and taught me that a solid foundation is key to future growth.\r\n\r\n---\r\n> Written: 2024-09-17\r\n","isPublished":true,"startDate":"2022-06-01","endDate":"2022-08-20","source":"","preview":"","banner":"152cdd2e-7be8-4055-9ca7-329868263752.png"},{"id":"7","name":"MRG Tests","topics":["webdev"],"details":["mysql","javascript","jquery"],"description":"## [ PLACEHOLDER ]\r\nThis content / documentation has not been written yet.  \r\nFor example please look at following projects:\r\n\r\n- [Spawnpoint](/project/010101)\r\n- [PC Building](/project/9eea76ca-4d96-47d4-816b-02ae416cb299)","isPublished":false,"startDate":"2022-02-01","endDate":"2022-06-20","source":"","preview":"","banner":"mrg_tests.png"},{"id":"37c4598e-0b39-4266-8deb-274a629b6c6a","name":"University","topics":["education"],"details":[""],"description":"## [ PLACEHOLDER ]\r\nThis content / documentation has not been written yet.  \r\nFor example please look at following projects:\r\n\r\n- [Spawnpoint](/project/010101)\r\n- [PC Building](/project/9eea76ca-4d96-47d4-816b-02ae416cb299)","isPublished":false,"startDate":"2022-01-10","endDate":"","source":"https://git.bats.li/bats/fhwedel","preview":"","banner":"d8ffc1f5-a439-4d0e-9942-bc4755c23610.png"},{"id":"8","name":"py_bounty","topics":["software"],"details":["python"],"description":"# Introduction\r\n**py_bounty** was my first serious project to get comfortable with Python programming. Initially, the goal was to create a **gambling game** that allowed players to use digital currency (with no real-world value) and included **multiplayer support**. However, as the project progressed, I realized that adding multiplayer functionality and ensuring a secure currency system to prevent cheating was outside the scope of this project.\r\n\r\nInstead, I focused on building a **command line interface (CLI)** for a single-player gambling game. The project allowed users to play **roulette** and, later, I added **blackjack** to the game.\r\n\r\n# Implementation Details\r\nI decided to limit the project to the **client-side** experience, meaning the game operates entirely in the terminal without a server or networked component. This made the project more manageable and allowed me to focus solely on improving my Python skills and logic for creating a fun and interactive game experience.\r\n\r\nThe entire project was built using Python, no external frameworks were used. This provided me with a good understanding of core Python features, including:\r\n\r\n- Handling user input and output in a CLI\r\n- Managing game logic for roulette and blackjack\r\n- Working with loops, conditions, and basic data structures\r\n\r\n# Features\r\n## Roulette Game \r\nA simple roulette game where players can bet on numbers, colors, or odd/even, using digital currency.\r\n\r\n[video](/static/resources/media/pybounty-roulette.mp4)\r\n\r\n## Blackjack Game\r\nA basic blackjack game where the user can play against the dealer, including standard features like hitting, standing, and busting.\r\n\r\n[video](/static/resources/media/pybounty-blackjack.mp4)\r\n\r\n# Known Issues\r\n## Ace Card\r\nOne of the known limitations is with **Ace handling in Blackjack**. In blackjack, the Ace can be counted as either 1 or 11, depending on which value is more beneficial for the player. When I initially programmed the blackjack game, I struggled with the logic for this. Specifically, I overcomplicated how to handle multiple Aces (e.g., when a player has two Aces) and therefore decided to postpone it, which became never.\r\n\r\n**Potential Fix**:\r\nLooking back, the solution would be to evaluate the player's hand and assign the Ace a value of 11 unless it would cause the player to bust, in which case it should count as 1. This way, the player's hand is always maximized without exceeding 21 and always in favor of the player.\r\n\r\n---\r\n> Written: 2024-09-19\r\n","isPublished":true,"startDate":"2022-01-01","endDate":"2022-01-20","source":"","preview":"","banner":"py_bounty.png"},{"id":"10","name":"Nichio Website","topics":["website"],"details":["mysql"],"description":"## [ PLACEHOLDER ]\r\nThis content / documentation has not been written yet.  \r\nFor example please look at following projects:\r\n\r\n- [Spawnpoint](/project/010101)\r\n- [PC Building](/project/9eea76ca-4d96-47d4-816b-02ae416cb299)","isPublished":false,"startDate":"2021-11-01","endDate":"2022-01-20","source":"","preview":"","banner":"f68bf841-303d-45ea-ae0f-731d1c6da2a1.png"},{"id":"11","name":"BNCE","topics":["concept"],"details":["encryption","php"],"description":"# Bats' Needlessly Complicated Encryption (BNCE)\r\nBNCE was my attempt at creating a fun and (not) military-grade encryption system. The idea was to encrypt plaintext by transforming it into a different set of words. These words were fetched from a `words.txt` file containing 10,000 unique words that I found on GitHub.\r\n\r\nI spent hours scratching my head during school, but the result was satisfying and helped me develop technical thinking, problem-solving skills, and a deeper understanding of encryption concepts.\r\n\r\n# Implementation Details\r\nSince there are more than 10,000 imaginable words, I couldn’t simply map each character to another word directly during the encryption process. Instead, I designed the encryption to transform **every two characters** into a word from the 10,000-word list. The assignment was based on the **line number** of the word.\r\n\r\nThe line number was calculated using the ASCII value of the first character, multiplied by a number larger than the second character could ever be to ensure determinism when summing both. This result was then added with hash sum of either the initial passphrase or the previous result, if there is one. \r\n\r\nI didn't know about cipher block chaining back then and how it is used in common encryption like AES, so you could say great minds think alike :)\r\n\r\n# Visualization\r\nI created a rough visualization of the encryption process. Though it’s a bit outdated (showing an earlier, less refined version), it can still help explain the basic workings of BNCE.\r\n\r\n![image](/static/resources/media/e1a3b9cb-2f9e-43b6-8a33-8736bf816939.png)\r\n\r\n# Preview\r\n## Encrypt and Decrypt with Correct Passphrase\r\nWatch the encryption and decryption process work flawlessly with the correct passphrase:\r\n[video](/static/resources/media/bnce-1.mp4)\r\n\r\n## Encrypt and Decrypt with Incorrect Passphrase\r\nSee how the encrypted text gets decrypted into nonsense with the wrong passphrase:\r\n[video](/static/resources/media/bnce-1.mp4)\r\n\r\nA live demonstration is also accessible at [bnce.bats.li](https://bnce.bats.li), however due to limiations from my server provider it only works in the **numerical mode**, which only shows the line number instead of the word. It's also kind of my fault for implementing it in PHP and probably very memory inefficient, which is why this limitation comes into place.\r\n\r\n---\r\n> Written: 2024-09-21","isPublished":true,"startDate":"2021-07-01","endDate":"2021-11-20","source":"","preview":"https://bnce.bats.li","banner":"907fee2f-72df-4439-9878-d45579286480.png"},{"id":"9","name":"Halbgeist","topics":["webdev"],"details":["html","css","javascript"],"description":"# Halbgeist Server Provider\r\n\r\n**Halbgeist** was a conceptual website I designed for a gaming server provider company idea that my friend Haron and I came up with. Although the idea never developed further, the website served as a preview of what **Halbgeist** could have been. You can view a preview of the site at [halbgeist.bats.li](https://halbgeist.bats.li) (Warning: The website is not mobile friendly).\r\n\r\n# Implementation Details\r\nThe website was purely created with **HTML**, **CSS**, and **JavaScript**. Since I was still learning how to structure HTML and style with CSS, the site lacks mobile responsiveness. I focused on creating a clean, conceptual layout but didn't consider mobile-friendly practices at the time.\r\n\r\n# Screenshots\r\n## Main Page\r\n\r\nThe landing page that welcomes users and showcases the concept of the gaming server provider.\r\n\r\n![image](/static/resources/media/383ecee0-7982-4ddd-967b-fd78e4a32c4c.png)\r\n\r\n## Game Server\r\n\r\n A section that provides a possibility to configure the server specifications to the clients needs.\r\n\r\n![image](/static/resources/media/3d53e4c0-797d-4b35-9a3a-92789e5f498e.png)\r\n\r\n## Game Overview\r\n\r\n The page which gives an overview to all supported games and services.\r\n\r\n![image](/static/resources/media/b729063c-5b88-4cd0-b1ea-7bf1a8924353.png)\r\n\r\nYou can see the full design on the [preview link](https://halbgeist.bats.li), but note that it is only optimized for desktop viewing.\r\n\r\n---\r\n> Written: 2024-09-20\r\n","isPublished":true,"startDate":"2021-06-01","endDate":"2021-08-20","source":"","preview":"https://halbgeist.bats.li","banner":"05664554-2120-483b-a18c-6fd72206da8d.png"},{"id":"12","name":"Concept Dashboard","topics":["webdev"],"details":["php","mysql"],"description":"## [ PLACEHOLDER ]\r\nThis content / documentation has not been written yet.  \r\nFor example please look at following projects:\r\n\r\n- [Spawnpoint](/project/010101)\r\n- [PC Building](/project/9eea76ca-4d96-47d4-816b-02ae416cb299)","isPublished":false,"startDate":"2021-02-01","endDate":"2021-04-20","source":"","preview":"","banner":"21789665-cd7d-452c-b2d8-03c08ecf6ca4.png"},{"id":"13","name":"Easy Math","topics":["software"],"details":["java","javafx"],"description":"# Introduction\r\n\r\nThis was a small software project designed to help users learn math by generating new and unique math problems. The application provides feedback on whether the solutions are correct, making it an effective tool for practicing arithmetic skills.\r\n\r\n![image](/static/resources/media/cde691c2-e5d0-4dad-94b3-c45ce0d884da.png)\r\n\r\n# Features\r\n\r\nThe software offers a settings panel where users can customize their experience by enabling or disabling different arithmetic operators.\r\n\r\n- **Hard Mode**: Includes negative numbers for more challenging questions.\r\n- **Additions**: Standard addition problems.\r\n- **Subtractions**: Basic subtraction problems.\r\n- **Multiplication**: Multiplying two numbers.\r\n- **Division**: Division problems where the results are rounded to 2 decimal places.\r\n\r\n![image](/static/resources/media/56ef410b-043d-4ea1-87d8-74fe0b1510d3.png)\r\n\r\nThis customization allows for flexible difficulty levels, making it a useful tool for learners of various skill levels.\r\n\r\n---\r\n> Written: 2024-09-22\r\n","isPublished":true,"startDate":"2020-11-01","endDate":"2020-11-20","source":"","preview":"https://steambats.itch.io/easy-math","banner":"873961d2-b131-463e-9e05-3c02cc1db7be.png"},{"id":"15","name":"Typing Hell (Website)","topics":["website"],"details":["php","mysql"],"description":"## [ PLACEHOLDER ]\r\nThis content / documentation has not been written yet.  \r\nFor example please look at following projects:\r\n\r\n- [Spawnpoint](/project/010101)\r\n- [PC Building](/project/9eea76ca-4d96-47d4-816b-02ae416cb299)","isPublished":false,"startDate":"2020-11-01","endDate":"2020-11-20","source":"","preview":"","banner":"90171707-9a66-4110-a6a7-c25d881fbdd9.png"},{"id":"14","name":"Easy Terminal","topics":["software"],"details":["java","javafx"],"description":"# Introduction\r\n\r\n**Easy Terminal** is a lightweight utility designed to streamline the process of executing programs, opening folders, or visiting websites, all in one place. It enables users to manage frequently used commands efficiently, helping to reduce repetitive tasks. With Easy Terminal, you can:\r\n\r\n- Execute programs\r\n- Open directories\r\n- Visit websites\r\n- Search Google, YouTube, and Wikipedia\r\n\r\n![image](/static/resources/media/4aa3ffd6-e1fd-44f9-aa19-f613dac404de.png)\r\n\r\nAll of this can be done using simple, customizable commands.\r\n\r\n# Command Documentation\r\n\r\n## Command Registration:\r\nAdds a new command to the config file for quick access.\r\n\r\nSyntax: `add <function> <name> <path>`\r\n\r\n- **function**: Specifies the operation to be performed (e.g., `execute`, `open`, `visit`).\r\n- **name**: A custom name for the command (e.g., `chrome`).\r\n- **path**: The path to the executable, folder, or URL (e.g., `C:\\programs\\google_chrome.exe`).\r\n\r\n**Example**:  \r\n```bash\r\nadd execute chrome C:\\programs\\google_chrome.exe\r\n```\r\n\r\n## Open Directory\r\nOpens a specific folder with a previously defined path.\r\n\r\nSyntax: `open <name>`\r\n- **name**: name of the previously registered open-command\r\n\r\n### Example  \r\n```bash\r\nopen downloads\r\n```\r\n\r\n## Execute Application\r\nExecutes a program with a previously defined path. You can also use the shortcut `exec` to shorten the command.\r\n\r\nSyntax:  `execute <name>`  \r\n- **name**: Name of the previously registered execute-command.\r\n\r\nShortcut: `exec <name>`\r\n\r\n### Example:  \r\n```bash\r\nexec chrome\r\n```\r\n\r\n## Visit Website\r\nOpens a website with a predefined URL. You can specify the website by its name or directly provide a URL.\r\n\r\nSyntax: `visit <name>`\r\n- **name**: Name of the previously registered execute-command.\r\n\r\n### Example:  \r\n```bash\r\nvisit mywebsite\r\n```\r\n\r\n## Quality of Life\r\nYou can perform web searches directly from Easy Terminal using the built-in commands for Google, YouTube, and Wikipedia. This allows for easy searching without needing to open a browser manually.\r\n\r\n- **YouTube Search**: `youtube <string>` or `yt <string>`\r\n- **Google Search**: `google <string>` or `google <string>`\r\n- **Wikipedia Search** `wikipedia <string>` or `wiki <string>`\r\n- **Help Command** `help` (Displays help for each command)\r\n- **Quit Command** `quit` (Quits the program)\r\n\r\n![image](/static/resources/media/5281471e-0961-415c-ba7d-dc11c8f39e23.png)\r\n\r\n---\r\n> Written: 2024-09-24\r\n","isPublished":true,"startDate":"2020-10-01","endDate":"2020-10-20","source":"","preview":"https://steambats.itch.io/easy-terminal","banner":"62d9eb77-0dc5-4213-8615-242cc4771b9f.png"},{"id":"16","name":"Typing Hell (Game)","topics":["software"],"details":["java","mysql"],"description":"# Introduction\r\n\r\n**Typing Hell** was the first big project I did without tutorials, entirely on my own, at the age of 16. Before this, I had followed [Fox Den's Java Tutorial for a Space Adventure Game](https://www.youtube.com/watch?v=7RlI2VioVtc&list=PLj0NZBHsZJkOh5kg9OW7_kZwWWnHPhfxt) and with the knowledge gained I created my [Fireman Game](/project/18).\r\n\r\nThe idea for Typing Hell was born while I was sitting in school, brainstorming with my friend Haron about making a fun game within my abilities that I could develop in Java. I came up with a Tetris-like game that combined elements of a type-racer game, thus, **Typing Hell** was born.\r\n\r\n[video](/static/resources/media/typing-hell-video1.mp4)\r\n\r\n# Journey\r\n\r\n## Preperation\r\n![image](/static/resources/media/2f50a7c4-bea1-40e7-b89a-a07edd7c5ae3.png)\r\n\r\nThe first step was creating a **JavaFX** application to display the words. I used an array of Labels, each either containing a letter or being empty, to represent the grid. \r\n\r\n![image](/static/resources/media/63a64542-e6d2-45c5-aadd-2f2a3cb7864d.png)\r\n\r\nHaving implemented that, now the fun part - implementing the game logic - could begin. \r\n\r\n## Game Logic and Physics\r\nI developed a method to insert words into unused positions. Each word was distinguished by a background color, and margins between labels made it easier to understand where each word began and ended, when looking at the screen.\r\n\r\n![image](/static/resources/media/7dde73d7-c33f-4ed5-aca3-02ce3cb2e925.png)\r\n\r\nThe next challenge was implementing \"physics\" to make the words drop down like Tetris pieces. However, there was a challenge in distinguishing between adjacent words since the only visual cue was the background color, because the backend / game logic only stored the array of Labels (which included information about the letter / text inside) and nothing more. In hindsight, mixing the game logic and UI like this wasn’t the best approach, as the backend should ideally work independently of the frontend, but it worked - so I count it as a success.\r\n\r\nOn the same note, the logic to drop and differentiate was implemented using background color and label content. Iterating through each label for each row, starting at a label that is not empty until a color change occurs. For this found word it was checked if it has enough space below for all letters to drop down or not. And that was it, gravity was invented, I felt as if I was Newton.\r\n\r\n[video](/static/resources/media/typing-hell-video2.mp4)\r\n\r\n# Design Choices\r\nTo make the game visually appealing and playable, I experimented with font size and contrast. The background color was randomized. Because of this, I encountered a problem where bright backgrounds made the text appear illegible.\r\n\r\n![image](/static/resources/media/935be546-0be1-4f0f-aaf6-cc5725cddafd.png)\r\n\r\nThe solution that I found to work the best was to make the font color dependant on the hue of the background color.\r\n\r\n![image](/static/resources/media/f6a5b141-fd7f-4f88-a0dc-3cc16733c844.png)\r\n\r\nWith the skeleton of the game standing, I had to decide on the gameplay goal. I implemented a survival mechanic where the player had to stay alive as long as possible, with words dropping faster over time. Additionally, I introduced a combo bonus system - shamelessly stolen from **osu!** - to reward accuracy and control beyond just typing speed. The game ended with a screen displaying stats from the round.\r\n\r\n![image](/static/resources/media/e8f77a53-e42f-49d4-81a5-46412e4fe7e3.png)\r\n\r\n# Release and Reception\r\nI released **Typing Hell** on [itch.io](https://steambats.itch.io/typing-hell), and it gained significant traction from a Reddit post. As of **18th September 2024**, it has more than **8,000 views** and **2,300 downloads**. The game was free, but optional donations filled me with joy. The experience of seeing people play and enjoy something I created was unforgettable.\r\n\r\n![image](/static/resources/media/405ce04f-719e-44af-be60-963417093b92.png)\r\n\r\n## Multiplayer and Leaderboard\r\nI received feedback requesting a multiplayer mode, so I decided to keep learning and implemented it. Using a rented **Netcup** server, I ran a **MySQL** server to store game stats and created a website with a top 15 leaderboard. However, due to being inexperienced in working with databases I didn't know a better solution than to have the credentials in plaintext stored in the code. Nonetheless I can proudly say that my server stands unattacked until today, probably due to me obfuscating the code as a layer of protection, because I wasn't **that** stupid. I see this accomplishment as an absolute win.\r\n\r\nI also proudly stand in **third place** on the leaderboard!\r\n\r\n![image](/static/resources/media/027a75a4-206e-44e4-a588-85f95e040e04.png)\r\n\r\n# Features (and Bugs)\r\n## Word Highlighting\r\nA fun algorithm was implementing a way to highlight the word that is currently being typed. Here I again ran into contrast issue with hardcoding a specific color to display this, so I chose to reverse the hue-adjusted font color. This algorithm simply iterates over all the words and checks if they start with whatever is being typed currently.\r\n\r\n![image](/static/resources/media/058864a7-e04c-4f91-bc35-e2f34c41401c.png)\r\n\r\n## Themes\r\nThemes was an idea I had since the beginning, but me still learning about color theory, I just couldn't find a good looking color palette for the background. \r\n\r\nA entire background image filling the screen was also a concept I made, but wasn't able to implement. I honestly don't remember what it was that stopped me from implementing it. In a late version I decided to implement a simple theme that switches the color palette to grayscale, and the upside was that here I could show the highlighting better!\r\n\r\n![image](/static/resources/media/9da9076e-8091-49d4-8494-512e6bb54054.png)\r\n\r\n## Rare Event Words\r\nJust to have some variety and rare special events, each time a new word spawns, there is a 0.3% chance that one out of three special words will spawn. The word to be typed has been difficult on purpose to distract the player.\r\n- **Freeze** (drops as \"{fr33ze}\"): Gravity is stopped and no new words spawn for 3 seconds\r\n- **Remove All** (drops as \"[r3moveALL]\"):  Removes all words on the screen (they won't get counted towards the score)\r\n- **No More Spawns** (drops as \"-NOMORESPAWNS-\"): No new words spawn for 3 seconds\r\n\r\n## Font Scaling\r\nOne of the most common bugs reported was the text being incorrectly displayed due to different font scaling across operating systems. This caused the words to become too large, replaced with **...** due to space limitations. Some players thought this was a feature, making the game even harder by forcing them to guess the words. So I guess **#ItsNotABugItsAFeature** is what we take away from this.\r\n\r\n![image](/static/resources/media/f18d1ab4-783d-49a1-8220-a92906d7ece7.png)\r\n\r\n---\r\n> Written: 2024-09-19","isPublished":true,"startDate":"2020-10-01","endDate":"2020-11-20","source":"","preview":"","banner":"c1b1dd9a-7b6b-4257-8e56-934992586606.png"},{"id":"9eea76ca-4d96-47d4-816b-02ae416cb299","name":"PC Building","topics":["hardware"],"details":["PC"],"description":"# Introduction\r\nThis is a place to document my journey with building & upgrading my PC.\r\n\r\n## 2024 April 13th\r\nAn upgrade needed to run Counter-Strike 2 flawlessly.\r\n+ AMD Ryzen 7 7800x3D\r\n+ Thermalright Phantom Spirit 120 EVO CPU Cooler\r\n+ CORSAIR Vengeance DDR5 RAM (2x 16 GB)\r\n+ MSI B650 Gaming Plus\r\n+ Replaced old 500GB SSD with Samsung 870 EVO 2TB\r\n+ WD BLack SN770 NVME SSD 1TB\r\n\r\n![img](/static/resources/media/1.png)\r\n\r\n## 2024 January 25th\r\nIn hopes to run Counter-Strike 2 with constant 240fps I decided to upgrade my GPU. It did not accomplish my goal :(\r\n+ NVIDIA RTX 4060 Ti\r\n\r\n![img](/static/resources/media/2.png)\r\n\r\n## 2021 July 26th\r\nI upgraded my 16GB DDR4 Ram to 32GB and alongside it upgraded my CPU.\r\n- AMD Ryzen 5 5800x\r\n- G.SKill RipJwas V 4x 8 GB RAM\r\n\r\n## 2020 April 30th\r\nI've won a 1000€ Gaming PC in a CS:GO Tournament (1st Place Finish). This came with a Ryzen 5 3600 which I used to replace my Ryzen 5 2600x. \r\nSpecs of the PC I had won (before modifying it):\r\n- AMD Ryzen 5 3600\r\n- AMD RX 5700XT\r\n- MSI MAG Core Liquid 240r\r\n\r\n![img](/static/resources/media/3.png)\r\n\r\nIt was a tournament with 128 participants, split into 4 groups (A, B, C, D) with 32 people each. The best 8 of each group advanced to the Final Group. I was first place in both groups :)\r\n\r\n![image](/static/resources/media/cd94060b-41bd-4570-9853-5f82988f3f54.png)\r\n\r\nAlso to mention a fun fact, in 2021 I participated in the [LuciferLeague](https://www.facebook.com/luciferesports) CS:GO Charity Cup, which was a small tournament with 8 Teams and 5 players on it each. Together we raised 2075€ for [ablegamers.org](https://ablegamers.org/).\r\n\r\n## 2020 April 14th\r\nHere we go RTX 2070.\r\n\r\n![alt text](/static/resources/media/c8582281-7816-4ff6-883a-3e22bddcb922.png)\r\n\r\n## 2019 January 15th\r\nI built my first PC, completely by myself with my own hands (with youtube tutorials!). My Case arrived 2 weeks later than the rest, so I had to use it without it during that time. For a short while I was using a **NZXT Kraken x63** all-in-one watercooler. Performance wasn't as expected, so I later replaced it with a **BeQuiet! Dark Rock 4**\r\n- NZXT H700 Case\r\n- AMD Ryzen 5 2600x\r\n- RX 580 8GB\r\n\r\n![img](/static/resources/media/4.png)\r\n\r\n## 2015 February 1st\r\nThe beginning of my journey. Here I got my first gaming PC coming from a cheap Laptop. Finally ready to fully enjoy Minecraft PvP. Unfortunately I didn't took many pictures of it back then. It was a pre-build PC from Amazon because I didn't know any better. However, it did it's job. Thanks BashPVP for the recommendation! I did upgrade the fans at some point to BeQuiet! Pure Wings 2 120mm.\r\nThe specs were:\r\n- Intel Core i5-4590\r\n- NVIDIA GTX 960\r\n- 16GB DDR3 RAM\r\n\r\n![image](/static/resources/media/1d88575f-119e-4751-a3e2-f152cb881232.png)\r\n\r\n![image](/static/resources/media/2193630c-b130-4988-9436-a8f7eaf1f8af.png)\r\n\r\n---\r\n> Written: 2024-09-14","isPublished":true,"startDate":"2019-01-15","endDate":"","source":"","preview":"","banner":"3176f145-4bf4-43cd-9459-25c8e8f677ce.png"},{"id":"17","name":"Nichio KeyBinder","topics":["software"],"details":["autohotkey"],"description":"# Introduction\r\nNichio Keybinder is a keybinding application created in AutoHotkey to automate repetitive tasks in **GTA San Andreas: Multiplayer** on the **Live-Your-Dream Roleplay Community**. The keybinder uses the [Open-SAMP-API](https://github.com/SAMPProjects/Open-SAMP-API) to directly perform in-game actions by manipulating memory addresses, simulating player behavior seamlessly.\r\n\r\nFor instance, instead of manually typing \"/carkeys\" in chat, players can simply press the **F2** key. This is just one example of the many tasks automated by Nichio Keybinder.\r\n\r\n# Application Overview\r\nThe keybinder features a simple **GUI** that displays basic information, mostly serving as an indication that the application is active. \r\n\r\n![image](/static/resources/media/7dd8cf22-bef1-4233-82bf-9c52fa4b686b.png)\r\n\r\nHowever, its main functionality operates through **in-game dialog screens**, to provide information without interrupting the gaming experience. \r\n\r\n![image](/static/resources/media/a05c1f0e-0cde-4620-8d8c-f99cd96d744a.png)\r\n\r\n# Functionality\r\n\r\n## Auto Updater\r\nThe **KeyBinder** has an auto-update feature, implemented es demonstrated in [Kraizy's YouTube Tutorial](https://www.youtube.com/watch?v=tKc43RIt-KU). The keybinder binaries are hosted on a web server specifically set up for this purpose at [nichio.de](https://nichio.de).\r\n\r\n![image](/static/resources/media/29b6aee7-9b46-4c64-8e68-4d86b92ea07c.png)\r\n\r\nOn each start of the keybinder a update is being checked in following steps:\r\n1. Fetch newest version number from nichio.de webserver and compare to current version\r\n2. If newest version does not equal current version then download newest installer.exe, run it and close this instance of the application.\r\n\r\nThe installer.exe simply deletes the old application (if one exists) and installs the newest version.\r\n\r\n## Website Integration\r\nWhen using the keybinder, players can log in with an account registered on [nichio.de](https://nichio.de) to configure their keybinding settings and customize actions based on their in-game characters, and see statistics like their usage of resources in-game (website is only available in german).\r\n\r\n![image](/static/resources/media/aaf2fcdc-f417-4965-bf53-c25886ea5b4a.png)\r\n\r\nAdditionally, the website provides an overview of registered users, displays who is currently online, and offers more detailed information.\r\n\r\n![image](/static/resources/media/0679a32b-31d8-4862-8dd9-d935c6d5d273.png)\r\n\r\n## In-Game Chat\r\nA IRC-like Chat has been implemented to allow communication only between users.\r\n\r\nThis works by catching each message starting with \"/nc\" (stands for Nichio-Chat) and send the message to the nichio.de webserver with information about the message and current user.\r\n\r\n![image](/static/resources/media/e18fd4e8-da7a-43a1-8794-f0adfa7052ed.png)\r\n\r\nThere is a script running periodically checking for new messages and displays them, if available.\r\n\r\n## Automations\r\n\r\n### Location Listener\r\nA location listener automatically performs specific tasks based on the player’s in-game location, such as using a fast-food drive-thru or loading resources into a vehicle at designated points.\r\n\r\n### Hotkeys\r\nVarious hotkeys are provided via the dialog field for easy access to key actions.\r\n\r\n### Commands\r\nMultiple commands are available to improve the player's quality of life or configuration options. For example, there is a **detective bot** that automatically searches for a player every 10 seconds.\r\n\r\n# What I Learned\r\nBuilding the **Nichio Keybinder** provided several key lessons:\r\n\r\n- **Single-threaded applications**: Be cautious when making API calls, as they can block the entire application while waiting for a response due to the lack of asynchronous handling. This made the keybinder sometimes unresponsive and ruin the immersion in the game.\r\n  \r\n- **Account security**: The project led me to rethink account implementation. Initially, a hashed password was sent with every API request to verify authenticity. Using **tokens** would have been a more secure and efficient solution. I have already adopted token-based authentication in my other projects, like [Pangolin](/project/9dc66200-8e96-438f-b9e8-c77857486718).\r\n\r\n---\r\n> Written: 2024-09-24\r\n","isPublished":true,"startDate":"2018-10-01","endDate":"2021-10-20","source":"https://github.com/batscs/Nichio-Keybinder-for-GTA-SAMP/","preview":"","banner":"1af64f1c-e99e-40f4-8a4b-fa2c8c8e7acd.png"},{"id":"62e6d9b4-8544-41fd-b955-70889e8fd624","name":"Arduino","topics":["hardware"],"details":["arduino"],"description":"# Introduction\r\n\r\nThis project was my deep dive into the **Arduino Uno Starter Kit**, where I experimented with several key components including a **16x2 character LCD display**, an **ultrasonic sensor**, **RGB LEDs**, and **servo motors**. The journey not only enhanced my understanding of electronics but also helped me become more familiar with programming in Arduino IDE.\r\n\r\n# Components Used\r\n- **Arduino Uno**: The microcontroller at the heart of the project.\r\n- **16x2 Character LCD Display**: Used to display real-time data.\r\n- **Ultrasonic Sensor**: For measuring distance.\r\n- **RGB LEDs**: To experiment with different color combinations.\r\n- **Servo Motors**: For precise control of angular motion.\r\n\r\n[video](/static/resources/media/arduino-1.mp4)\r\n\r\n\r\n![image](/static/resources/media/844e68d6-aba0-4fc2-91d4-46549296babb.png)\r\n---\r\n> Written: 2024-09-22","isPublished":true,"startDate":"2018-08-01","endDate":"2018-09-25","source":"","preview":"","banner":"b0c2e27e-fb5e-4918-afa5-1cda3e6d3d2a.png"},{"id":"18","name":"Fireman","topics":["software"],"details":["java","swing"],"description":"# Introduction\r\n\r\nThis was my first java project which I did all by myself while being 13 years old. Preperation was [Fox Den's Space Adventure Tutorial in Java](https://www.youtube.com/watch?v=7RlI2VioVtc&list=PLj0NZBHsZJkOh5kg9OW7_kZwWWnHPhfxt) which I followed as a learning project before Fireman.\r\n\r\nAll visuals were drawn by me using paint.net (except Johnny, thanks Erdem), the animations were simple gifs out of multiple drawn stop motion frames.\r\n\r\n[video](/static/resources/media/Fireman.mp4)\r\n\r\n# Implementation Details\r\nNot knowing any better, this game was made entirely with static programming in java without making a single object. This was because I learned it that way for the space adventure game, where the player rocket and space rocks were only very few and thus implemented not as objects but as two variables representing the coordinates.\r\n\r\nI used a `Var.class` which stored all variables that I used, the game allowed only movement on the x axis, so I just stored a x coordinate and a boolean whether the enemy is alive or not.\r\n\r\n![image](/static/resources/media/4ced343c-0dee-4d14-a785-502658d863ce.png)\r\n\r\n![image](/static/resources/media/0ce5b7cc-187f-4597-8c8d-d94045bf5c83.png)\r\n\r\nThe entire game was basically just if statements drawing whatever was true right now and at the coordinates relative to where the player is now. \r\n\r\nThough it wasn't perfect, it was a really fun experience to make a game all by myself and I felt like accomplishing something and it was nice seeing progress. Honestly speaking objects would have most likely been just too confusing for me back then and this was a simple imperfect solution.\r\n\r\n## Save File\r\nBecause I felt like implementing even more features, also a save file was included, which was just a line seperated value file, the order having to be exactly and not flexible file was a issue I ignored, because hey if somebody is going to cheat and manipulate a save state they might aswell deserve to reverse engineer the save file.\r\n\r\n![image](/static/resources/media/9b2cd77a-dac3-4436-9101-0895508bbcac.png)\r\n\r\n---\r\n> Written: 2024-09-21","isPublished":true,"startDate":"2017-09-01","endDate":"2017-10-20","source":"https://git.bats.li/bats/Fireman","preview":"","banner":"b1209f9b-107b-4f53-8910-eda0553475c3.png"},{"id":"19","name":"Minecraft Plugins","topics":["software"],"details":["java","plugin"],"description":"# Introduction\r\n\r\nIn 2016 and 2017, I [developed and released](https://www.spigotmc.org/resources/authors/mousecodez.296030/) two plugins for **Minecraft Spigot**: **SmexAntiCheat (SAC)** and **Systematic**. These plugins are designed to enhance server security and gameplay by providing anti-cheat measures and essential game functions.\r\n\r\n### What is Spigot?\r\n\r\nSpigot is a high-performance Minecraft server software that allows developers to create custom plugins to extend game functionality. It’s widely used by the Minecraft community due to its flexibility and robust API.\r\n\r\n# Plugins\r\n\r\n## Plugin 1: Systematic\r\n\r\n[Systematic](https://www.spigotmc.org/resources/systematic.31866/) is a versatile plugin that adds various commands and functions to improve server management and player experience. It was the first plugin I developed, serving as a learning tool for how to interact with users and handle events like player joins and leaves, as well as creating custom entities with unique interactions such as villager trading.\r\n\r\n### Key Commands & Permissions:\r\n- `/Systematic` — **syst.Systematic**: Information about the plugin.\r\n- `/Eat` — **syst.Eat**: Grants player saturation.\r\n- `/FlightEnable` / `/FlightDisable` — **syst.FlightEnable**: Toggles flight mode.\r\n- `/MoveTo` — **syst.MoveTo**: Teleports you to another player.\r\n- `/SetShop` — **syst.setshop**: Sets a villager who trades items.\r\n- `/SetBootTrader` — **syst.setboots**: Sets a villager who trades boots.\r\n- `/setback` and `/goback` — **syst.setback**: Allows you to set and return to a point.\r\n\r\n### Events:\r\n- **Join/Leave Messages**: Welcomes or says goodbye to players.\r\n- **Death Messages**: Custom messages upon player deaths.\r\n\r\n## Plugin 2: SmexAntiCheat (SAC)\r\n\r\n[SmexAntiCheat](https://www.spigotmc.org/resources/smexanticheat.37293/) is an anti-cheat plugin designed to help server admins detect and prevent common cheats in Minecraft. This was my second plugin, developed about half a year after Systematic. My goal was to dive deeper into cheat detection, focusing on monitoring player stats like movement and crosshair placement to detect suspicious behaviors in real-time.\r\n\r\n### Detections:\r\n- **Flight**\r\n- **Speed**\r\n- **Glide**\r\n- **NoSlowDown (Bow)**\r\n- **FastBow**\r\n\r\n### Commands & Permissions:\r\n- `/report` — **sac.command.report**: Report a player.\r\n- `/SeeReport` — **sac.chat.reportview**: View reports.\r\n- `/help` or `/?` — Displays server info.\r\n","isPublished":true,"startDate":"2016-11-01","endDate":"2016-11-20","source":"","preview":"https://www.spigotmc.org/resources/authors/mousecodez.296030/","banner":"c7dc65ae-c535-41cd-af94-b496ce31c2a6.png"},{"id":"21","name":"Vendetta","topics":["software"],"details":["java"],"description":"# Introduction\r\n\r\nThis was one of my very first ventures into development. At the time, I had absolutely no idea what I was doing, but I was a huge **Minecraft** fan and was keen on modifying the game to my advantage (some might call it cheating). \r\n\r\nI didn’t have any formal knowledge of programming, so I simply followed various YouTube tutorials to try and get things working. Looking back, there isn't much for me to say about this project, especially since I don’t have any screenshots from the development process - after all, it was about 8 years ago as of writing this.\r\n\r\n# Fun Trivia\r\nOne amusing memory from this project was when I told my friend **Haron** about what I was doing, and he wanted to join in. However, he ran into an issue because he missed a crucial step from one of the tutorials: he forgot to create a main class with a main method and couldn't execute the client. Guess that's a mistake he won't do again :)\r\n\r\n# Closing\r\nThanks for taking the time to read about Project Vendetta. There's not much content here, but I still wanted to document what I have done over the years.\r\n\r\nI highly recommend checking out some of my other projects, which have a richer documentation! You can view them [here](/projects).","isPublished":true,"startDate":"2016-10-01","endDate":"2016-11-01","source":"","preview":"","banner":"b7ce7fa2-3e70-49aa-bf59-7c04205207e8.png"},{"id":"20","name":"Batch Scripting","topics":["software"],"details":["cmd"],"description":"## [ PLACEHOLDER ]\r\nThis content / documentation has not been written yet.  \r\nFor example please look at following projects:\r\n\r\n- [Spawnpoint](/project/010101)\r\n- [PC Building](/project/9eea76ca-4d96-47d4-816b-02ae416cb299)","isPublished":true,"startDate":"2016-08-01","endDate":"2016-08-20","source":"","preview":"","banner":""},{"id":"22","name":"Voice Listener","topics":["software"],"details":["visual basic"],"description":"## [ PLACEHOLDER ]\r\nThis content / documentation has not been written yet.  \r\nFor example please look at following projects:\r\n\r\n- [Spawnpoint](/project/010101)\r\n- [PC Building](/project/9eea76ca-4d96-47d4-816b-02ae416cb299)","isPublished":true,"startDate":"2015-06-01","endDate":"2015-06-20","source":"","preview":"","banner":""}]